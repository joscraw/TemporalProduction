version: "3.8"

services:
  temporal:
    container_name: temporal-server
    image: temporalio/auto-setup:latest
    depends_on:
      - elasticsearch
    environment:
      # Database Configuration
      - DB=postgres12
      - DB_PORT=${DB_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PWD=${POSTGRES_PASSWORD}
      - POSTGRES_SEEDS=${POSTGRES_HOST}
      - DBNAME=${POSTGRES_DB}
      - POSTGRES_TLS_ENABLED=true
      - POSTGRES_TLS_DISABLE_HOST_VERIFICATION=true
      - SQL_TLS_ENABLED=true
      - SQL_TLS_DISABLE_HOST_VERIFICATION=true

      # Elasticsearch Configuration
      - ENABLE_ES=true
      - ES_SEEDS=elasticsearch
      - ES_VERSION=v7

      # Service Configuration
      - SERVICES=frontend,matching,history,worker
      - DYNAMIC_CONFIG_FILE_PATH=/etc/temporal/config/dynamicconfig/production.yaml

    ports:
      - "7233:7233"  # gRPC port for workers/clients
      - "127.0.0.1:7234:7234"  # Metrics port (internal only)

    networks:
      - temporal-network

    volumes:
      - ./dynamicconfig:/etc/temporal/config/dynamicconfig
      - temporal-data:/var/temporal

    restart: unless-stopped

    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G

    healthcheck:
      test: ["CMD", "temporal", "health-check"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  temporal-admin-tools:
    container_name: temporal-admin-tools
    image: temporalio/admin-tools:latest
    depends_on:
      - temporal
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CLI_ADDRESS=temporal:7233
    networks:
      - temporal-network
    stdin_open: true
    tty: true
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M

  temporal-ui:
    container_name: temporal-ui
    image: temporalio/ui:latest
    depends_on:
      - temporal
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CORS_ORIGINS=https://${DOMAIN}
      - TEMPORAL_UI_PORT=8080
    ports:
      - "127.0.0.1:8080:8080"  # Only accessible locally, nginx will proxy
    networks:
      - temporal-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M

  elasticsearch:
    container_name: temporal-elasticsearch
    image: elasticsearch:7.17.27
    environment:
      - cluster.routing.allocation.disk.threshold_enabled=true
      - cluster.routing.allocation.disk.watermark.low=512mb
      - cluster.routing.allocation.disk.watermark.high=256mb
      - cluster.routing.allocation.disk.watermark.flood_stage=128mb
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - xpack.security.enabled=false
      - indices.breaker.total.limit=75%
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - temporal-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  nginx:
    image: nginx:alpine
    container_name: temporal-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/temporal-http.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - temporal-ui
    networks:
      - temporal-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M

volumes:
  temporal-data:
    driver: local
  elasticsearch-data:
    driver: local

networks:
  temporal-network:
    driver: bridge
    name: temporal-network